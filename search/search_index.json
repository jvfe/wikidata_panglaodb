{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Analysing the extent of cell type information present in Wikidata: A case study on PanglaoDB Research compendium for the project \"Analysing the extent of cell type information present in Wikidata: A case study on PanglaoDB\". Repository brief descrition Research-related directories: analysis : Scripts and notebooks used for the main analysis. It also includes the subdirectories: data : Raw data from PanglaoDB and Wikidata is stored here. results : Processed data is stored here. manuscripts : Manuscripts for this research project, each manuscript is a submodule of a GitHub repository that uses Manubot . improvements : One-use code, creating Wikidata items from PanglaoDB's metadata and improving existing items. Software-related directories, they are structured similarly to a Python package: wikidata_panglaodb : This is the source code for all author-defined functions used in the analysis. tests : These are the unit tests for the wikidata_panglaodb \"package\" functions. docs : This is a directory containing documentation for the wikidata_panglaodb functions, it is served as a live website in our github pages branch. Reproducing and developing Reproducing the analyses Pre-requisites: Python>=3.7 A unix based terminal interface. Download the repository's zip file or clone it using: git clone --recurse-submodules https://github.com/jvfe/wikidata_panglaodb Then, at the project's root directory (wikidata_panglaodb/): pip install . And then run the scripts in the analysis/ subdirectory. Collaborating Pre-requisites: Git A unix based terminal interface Conda Initiate the environment: conda env create -f environment.yaml conda activate wdt_panglaodb Download the base package in editable mode: pip install -e . If you've already collaborated before but changes have been made to the conda enviroment/repository, run: git pull origin master conda activate wdt_panglaodb conda env update --file environment.yaml","title":"Home"},{"location":"#analysing-the-extent-of-cell-type-information-present-in-wikidata-a-case-study-on-panglaodb","text":"Research compendium for the project \"Analysing the extent of cell type information present in Wikidata: A case study on PanglaoDB\".","title":"Analysing the extent of cell type information present in Wikidata: A case study on PanglaoDB"},{"location":"#repository-brief-descrition","text":"Research-related directories: analysis : Scripts and notebooks used for the main analysis. It also includes the subdirectories: data : Raw data from PanglaoDB and Wikidata is stored here. results : Processed data is stored here. manuscripts : Manuscripts for this research project, each manuscript is a submodule of a GitHub repository that uses Manubot . improvements : One-use code, creating Wikidata items from PanglaoDB's metadata and improving existing items. Software-related directories, they are structured similarly to a Python package: wikidata_panglaodb : This is the source code for all author-defined functions used in the analysis. tests : These are the unit tests for the wikidata_panglaodb \"package\" functions. docs : This is a directory containing documentation for the wikidata_panglaodb functions, it is served as a live website in our github pages branch.","title":"Repository brief descrition"},{"location":"#reproducing-and-developing","text":"","title":"Reproducing and developing"},{"location":"#reproducing-the-analyses","text":"Pre-requisites: Python>=3.7 A unix based terminal interface. Download the repository's zip file or clone it using: git clone --recurse-submodules https://github.com/jvfe/wikidata_panglaodb Then, at the project's root directory (wikidata_panglaodb/): pip install . And then run the scripts in the analysis/ subdirectory.","title":"Reproducing the analyses"},{"location":"#collaborating","text":"Pre-requisites: Git A unix based terminal interface Conda Initiate the environment: conda env create -f environment.yaml conda activate wdt_panglaodb Download the base package in editable mode: pip install -e . If you've already collaborated before but changes have been made to the conda enviroment/repository, run: git pull origin master conda activate wdt_panglaodb conda env update --file environment.yaml","title":"Collaborating"},{"location":"analysis_description/","text":"Analysis directory Here you will find all scripts used in the actual analysis. To run them, make sure you ran pip install . at the root directory. Simple data transformation scripts are plain text python files, scripts containing extensive information and associated plots are jupyter notebooks. Brief description preprocessing.py : Downloads metadata from PanglaoDB into the data/panglaodb directory, also reconciles said data and outputs the matches to the results/all_matches directory. For genes, since a manual merge is used, the matches are outputted to results/true_matches. similarity_check.py : Checks the reconciled/all_matches data for similarity matching, outputting the filtered data to results/true_matches. analyse_matches.py : Summarize the manually curated matches. item_quality.py : Item quality assesment on the manually curated matches and associated plots.","title":"Analysis description"},{"location":"analysis_description/#analysis-directory","text":"Here you will find all scripts used in the actual analysis. To run them, make sure you ran pip install . at the root directory. Simple data transformation scripts are plain text python files, scripts containing extensive information and associated plots are jupyter notebooks.","title":"Analysis directory"},{"location":"analysis_description/#brief-description","text":"preprocessing.py : Downloads metadata from PanglaoDB into the data/panglaodb directory, also reconciles said data and outputs the matches to the results/all_matches directory. For genes, since a manual merge is used, the matches are outputted to results/true_matches. similarity_check.py : Checks the reconciled/all_matches data for similarity matching, outputting the filtered data to results/true_matches. analyse_matches.py : Summarize the manually curated matches. item_quality.py : Item quality assesment on the manually curated matches and associated plots.","title":"Brief description"},{"location":"log_book/","text":"What we did, tried, and accomplished during each day of the project. 03/09 Downloaded cell type, organ, tissue and gene data from the wikidata query service. Gene queries used: Homo sapiens , Mus musculus Cell query used Tissues query used Organs query used 04/09 Reconciled cell type, tissue and organ using the preprocessing script and associated functions, returning all matches. 05/09 Made a script, similarity_check.py, to better match Panglao's items to wikidata QIDs, ran the script and the results are in results/true_matches/. 06/09 Refactored the similarity function, to use less repetition Added matching section for genes in preprocessing.py, the matching is done using a manual merge with the wikidata query. 07/09 Started work on manual item checking Manual item checking cells_checked: Q7840744 - Trychocyte - represents the Algae cell type, not the human cell type (Q7840748), match removed. Not false matched but something of note, Q7116107, Q3326185 and Q66592566 all represent the same concept, oxyphil cells. tissues_checked: Q5173237 refer to the outer layer of rocks, removed. Q1475019 and Q18816500 (Colon) refer to the grammatical figure, both removed. Q96377210 (Embryo) is a song, removed. Q719458 (Brain) and Q1409015 (heart) refers to the foods, removed. Q2281500 (Rib) is a deformation on a surface, removed. Q67208213 (Thymus) is a spice, removed. Q1615371 (stomacher) is a decorative item, removed. Q1155702 (skin) is a graphical interface, removed. Q97671426 (Skin) is a British TV series, removed. Q5262664 (DermIS) is an information system, removed. Q85782674 (Lungs) is a play, removed. Plant structures removed Q1120914 (Placenta) Q1293511 (Cortex) Q148515 (ovary) Chinese medicine or religion items removed Q7543099 (Small intestine) Q6704252 and Q6704255 (Lung) Q6140833 (Kidney) Q7578442 (Spleen) Q6140977 (Liver) Q7618690 (Stomach) Q5691852 (Heart) organs_checked: Q1155702 (skin) is a graphical interface, removed. Q97671426 (Skin) is a British TV series, removed. Q7535317 (Skin) is an aircraft component, removed. Q85782674 (Lungs) is a play, removed. Q67208213 (Thymus) is a spice, removed. Q96377210 (Embryo) is a song, removed. Q1120914 (Placenta) is a plant structure, removed. Food items removed Q1409015 (Heart) Q494268 (blood) Chinese medicine or religion items removed Q6140833 (Kidney) Q5691852 (Heart) Q6140977 (Liver) Started working on the item quality assesment - halted until manual item matching is finished 08/09 Started working on analysing matches: Changed module name wdt to quality, since it'll contain all item quality-related functions. Made summary tables for all reconciled panglaodb entities (cells, tissues and organs) Made plots for item types of the reconciled items. 09/09 Analysed gene item matches, percentage that matched, etc. Added this in the draft. This warranted the refactoring of a quality module function, now dismembered in two functions. Continued work on the item quality assessment. 16/09 Fixed number of statements for outlier Q18033537, since the number it had previously (400+) was due to multiple wrong statements Discussed visualizations. 17/09 Continued work on item quality assessment, building initial visualizations. 18/09 Built all initial draft visualizations, now need to refactor and test the code in item_quality.py. 20/09 Refactoring and testing functions associated with the item quality assessment. 21/09 Updating table in analyse_matches.py to print totals as well. Started working primarily in the manuscript. Progress for this can be followed here 02/10 Created improvements/ directory, code used for improving wikidata items and creating new ones. Isolated PanglaoDB's data that was missing from Wikidata. 07/10 Reconciled organs once more, now adding \"animal organ\" as one of the possible reconcilable types. This will fix most missing matches. Adding false match removal as a script, to avoid manually editing intermediate files. 08/10 Committed what was done in 07/10. Reproduced item_quality assessement, now with the new reconciled organ data. 09/10 Code for adding ensembl gene IDs to Wikidata items.","title":"Log book"},{"location":"log_book/#0309","text":"Downloaded cell type, organ, tissue and gene data from the wikidata query service. Gene queries used: Homo sapiens , Mus musculus Cell query used Tissues query used Organs query used","title":"03/09"},{"location":"log_book/#0409","text":"Reconciled cell type, tissue and organ using the preprocessing script and associated functions, returning all matches.","title":"04/09"},{"location":"log_book/#0509","text":"Made a script, similarity_check.py, to better match Panglao's items to wikidata QIDs, ran the script and the results are in results/true_matches/.","title":"05/09"},{"location":"log_book/#0609","text":"Refactored the similarity function, to use less repetition Added matching section for genes in preprocessing.py, the matching is done using a manual merge with the wikidata query.","title":"06/09"},{"location":"log_book/#0709","text":"Started work on manual item checking","title":"07/09"},{"location":"log_book/#manual-item-checking","text":"cells_checked: Q7840744 - Trychocyte - represents the Algae cell type, not the human cell type (Q7840748), match removed. Not false matched but something of note, Q7116107, Q3326185 and Q66592566 all represent the same concept, oxyphil cells. tissues_checked: Q5173237 refer to the outer layer of rocks, removed. Q1475019 and Q18816500 (Colon) refer to the grammatical figure, both removed. Q96377210 (Embryo) is a song, removed. Q719458 (Brain) and Q1409015 (heart) refers to the foods, removed. Q2281500 (Rib) is a deformation on a surface, removed. Q67208213 (Thymus) is a spice, removed. Q1615371 (stomacher) is a decorative item, removed. Q1155702 (skin) is a graphical interface, removed. Q97671426 (Skin) is a British TV series, removed. Q5262664 (DermIS) is an information system, removed. Q85782674 (Lungs) is a play, removed. Plant structures removed Q1120914 (Placenta) Q1293511 (Cortex) Q148515 (ovary) Chinese medicine or religion items removed Q7543099 (Small intestine) Q6704252 and Q6704255 (Lung) Q6140833 (Kidney) Q7578442 (Spleen) Q6140977 (Liver) Q7618690 (Stomach) Q5691852 (Heart) organs_checked: Q1155702 (skin) is a graphical interface, removed. Q97671426 (Skin) is a British TV series, removed. Q7535317 (Skin) is an aircraft component, removed. Q85782674 (Lungs) is a play, removed. Q67208213 (Thymus) is a spice, removed. Q96377210 (Embryo) is a song, removed. Q1120914 (Placenta) is a plant structure, removed. Food items removed Q1409015 (Heart) Q494268 (blood) Chinese medicine or religion items removed Q6140833 (Kidney) Q5691852 (Heart) Q6140977 (Liver) Started working on the item quality assesment - halted until manual item matching is finished","title":"Manual item checking"},{"location":"log_book/#0809","text":"Started working on analysing matches: Changed module name wdt to quality, since it'll contain all item quality-related functions. Made summary tables for all reconciled panglaodb entities (cells, tissues and organs) Made plots for item types of the reconciled items.","title":"08/09"},{"location":"log_book/#0909","text":"Analysed gene item matches, percentage that matched, etc. Added this in the draft. This warranted the refactoring of a quality module function, now dismembered in two functions. Continued work on the item quality assessment.","title":"09/09"},{"location":"log_book/#1609","text":"Fixed number of statements for outlier Q18033537, since the number it had previously (400+) was due to multiple wrong statements Discussed visualizations.","title":"16/09"},{"location":"log_book/#1709","text":"Continued work on item quality assessment, building initial visualizations.","title":"17/09"},{"location":"log_book/#1809","text":"Built all initial draft visualizations, now need to refactor and test the code in item_quality.py.","title":"18/09"},{"location":"log_book/#2009","text":"Refactoring and testing functions associated with the item quality assessment.","title":"20/09"},{"location":"log_book/#2109","text":"Updating table in analyse_matches.py to print totals as well. Started working primarily in the manuscript. Progress for this can be followed here","title":"21/09"},{"location":"log_book/#0210","text":"Created improvements/ directory, code used for improving wikidata items and creating new ones. Isolated PanglaoDB's data that was missing from Wikidata.","title":"02/10"},{"location":"log_book/#0710","text":"Reconciled organs once more, now adding \"animal organ\" as one of the possible reconcilable types. This will fix most missing matches. Adding false match removal as a script, to avoid manually editing intermediate files.","title":"07/10"},{"location":"log_book/#0810","text":"Committed what was done in 07/10. Reproduced item_quality assessement, now with the new reconciled organ data.","title":"08/10"},{"location":"log_book/#0910","text":"Code for adding ensembl gene IDs to Wikidata items.","title":"09/10"},{"location":"reference/plotting/","text":"Plotting module plot_matched_item_types() Plot reconciled item types This will make a count table of item types, and plot it, for a defined entity type (data_type), it will take in the reconciled table itself, from where it will extract the counts, a summary table from where the totals can be acquired, the entity type being analysed and an axis on a matplotlib figure. Parameters: Name Type Description Default reconciled_table DataFrame The table containing the reconciled items. required summary_table DataFrame A summary table created by summarize_histology() required data_type str The data type being analysed, \"cells\", \"organs\" or \"tissues\". required ax matplotlib.axes.Axes A matplotlib figure axis to plot the final figure. required Returns: Type Description matplotlib.Figure A bar plot for the item type counts. Source code in wikidata_panglaodb/plotting.py def plot_matched_item_types ( reconciled_table , summary_table , data_type , ax ): \"\"\"Plot reconciled item types This will make a count table of item types, and plot it, for a defined entity type (data_type), it will take in the reconciled table itself, from where it will extract the counts, a summary table from where the totals can be acquired, the entity type being analysed and an axis on a matplotlib figure. Args: reconciled_table (DataFrame): The table containing the reconciled items. summary_table (DataFrame): A summary table created by summarize_histology() data_type (str): The data type being analysed, \"cells\", \"organs\" or \"tissues\". ax (matplotlib.axes.Axes): A matplotlib figure axis to plot the final figure. Returns: matplotlib.Figure: A bar plot for the item type counts. \"\"\" type_counts = ( reconciled_table [ \"type\" ] . value_counts () . reset_index () . replace ( \"[]\" , \"None\" ) . rename ( columns = { \"index\" : \"Item type\" , \"type\" : \"# of items\" }) ) type_counts [ \" % o f matched items\" ] = ( type_counts [ \"# of items\" ] / summary_table . loc [ data_type , \"n_item_matches\" ] ) * 100 p = sns . barplot ( x = \"Item type\" , y = \" % o f matched items\" , data = type_counts , edgecolor = \"w\" , color = \"rosybrown\" , # palette=\"magma\", dodge = False , ax = ax , ) p . set ( xlabel = None ) p . set_xticklabels ( p . get_xticklabels (), rotation = 45 , horizontalalignment = \"right\" ) return p plot_gene_violin() Make a violin plot for gene data Plots the distribution of the number of statements for reconciled gene data. Parameters: Name Type Description Default data DataFrame Gene data. required file_to str Path where to save the final image. required Source code in wikidata_panglaodb/plotting.py def plot_gene_violin ( data , file_to , miniplot = False ): \"\"\"Make a violin plot for gene data Plots the distribution of the number of statements for reconciled gene data. Args: data (DataFrame): Gene data. file_to (str): Path where to save the final image. miniplot (bool). Wether or not have a miniplot. \"\"\" fig , ax = plt . subplots ( figsize = ( 10 , 10 )) sns . violinplot ( x = \"species\" , y = \"statements\" , cut = 0 , # hue=\"species\", data = data , palette = \"Set2\" , split = True , scale = \"count\" , inner = \"quartiles\" , ax = ax , ) ax . set_xlabel ( \"\" ) ax . set_ylabel ( \"# of statements\" ) if miniplot == True : ax2 = plt . axes ([ 0.2 , 0.6 , 0.2 , 0.2 ]) sns . violinplot ( x = \"species\" , y = \"statements\" , cut = 0 , # hue=\"species\", data = data [ data [ \"statements\" ] < 70 ], palette = \"Set2\" , split = True , scale = \"count\" , inner = \"quartiles\" , ax = ax2 , ) ax2 . set_xticklabels ( \"\" ) # ax2.set_yticklabels('') ax2 . set_xlabel ( \"\" ) ax2 . set_ylabel ( \"\" ) ax2 . grid ( False ) ax . grid ( False ) fig . savefig ( file_to ) else : fig . savefig ( file_to )","title":"Plotting"},{"location":"reference/plotting/#plotting-module","text":"plot_matched_item_types()","title":"Plotting module"},{"location":"reference/plotting/#wikidata_panglaodb.plotting.plot_matched_item_types","text":"Plot reconciled item types This will make a count table of item types, and plot it, for a defined entity type (data_type), it will take in the reconciled table itself, from where it will extract the counts, a summary table from where the totals can be acquired, the entity type being analysed and an axis on a matplotlib figure. Parameters: Name Type Description Default reconciled_table DataFrame The table containing the reconciled items. required summary_table DataFrame A summary table created by summarize_histology() required data_type str The data type being analysed, \"cells\", \"organs\" or \"tissues\". required ax matplotlib.axes.Axes A matplotlib figure axis to plot the final figure. required Returns: Type Description matplotlib.Figure A bar plot for the item type counts. Source code in wikidata_panglaodb/plotting.py def plot_matched_item_types ( reconciled_table , summary_table , data_type , ax ): \"\"\"Plot reconciled item types This will make a count table of item types, and plot it, for a defined entity type (data_type), it will take in the reconciled table itself, from where it will extract the counts, a summary table from where the totals can be acquired, the entity type being analysed and an axis on a matplotlib figure. Args: reconciled_table (DataFrame): The table containing the reconciled items. summary_table (DataFrame): A summary table created by summarize_histology() data_type (str): The data type being analysed, \"cells\", \"organs\" or \"tissues\". ax (matplotlib.axes.Axes): A matplotlib figure axis to plot the final figure. Returns: matplotlib.Figure: A bar plot for the item type counts. \"\"\" type_counts = ( reconciled_table [ \"type\" ] . value_counts () . reset_index () . replace ( \"[]\" , \"None\" ) . rename ( columns = { \"index\" : \"Item type\" , \"type\" : \"# of items\" }) ) type_counts [ \" % o f matched items\" ] = ( type_counts [ \"# of items\" ] / summary_table . loc [ data_type , \"n_item_matches\" ] ) * 100 p = sns . barplot ( x = \"Item type\" , y = \" % o f matched items\" , data = type_counts , edgecolor = \"w\" , color = \"rosybrown\" , # palette=\"magma\", dodge = False , ax = ax , ) p . set ( xlabel = None ) p . set_xticklabels ( p . get_xticklabels (), rotation = 45 , horizontalalignment = \"right\" ) return p plot_gene_violin()","title":"wikidata_panglaodb.plotting.plot_matched_item_types"},{"location":"reference/plotting/#wikidata_panglaodb.plotting.plot_gene_violin","text":"Make a violin plot for gene data Plots the distribution of the number of statements for reconciled gene data. Parameters: Name Type Description Default data DataFrame Gene data. required file_to str Path where to save the final image. required Source code in wikidata_panglaodb/plotting.py def plot_gene_violin ( data , file_to , miniplot = False ): \"\"\"Make a violin plot for gene data Plots the distribution of the number of statements for reconciled gene data. Args: data (DataFrame): Gene data. file_to (str): Path where to save the final image. miniplot (bool). Wether or not have a miniplot. \"\"\" fig , ax = plt . subplots ( figsize = ( 10 , 10 )) sns . violinplot ( x = \"species\" , y = \"statements\" , cut = 0 , # hue=\"species\", data = data , palette = \"Set2\" , split = True , scale = \"count\" , inner = \"quartiles\" , ax = ax , ) ax . set_xlabel ( \"\" ) ax . set_ylabel ( \"# of statements\" ) if miniplot == True : ax2 = plt . axes ([ 0.2 , 0.6 , 0.2 , 0.2 ]) sns . violinplot ( x = \"species\" , y = \"statements\" , cut = 0 , # hue=\"species\", data = data [ data [ \"statements\" ] < 70 ], palette = \"Set2\" , split = True , scale = \"count\" , inner = \"quartiles\" , ax = ax2 , ) ax2 . set_xticklabels ( \"\" ) # ax2.set_yticklabels('') ax2 . set_xlabel ( \"\" ) ax2 . set_ylabel ( \"\" ) ax2 . grid ( False ) ax . grid ( False ) fig . savefig ( file_to ) else : fig . savefig ( file_to )","title":"wikidata_panglaodb.plotting.plot_gene_violin"},{"location":"reference/preprocessing/","text":"Preprocessing module downloads_panglao() Downloads metadata from PanglaoDB Gets the unique values of metadata entities and writes those to text files. Parameters: Name Type Description Default data_urls dict(list A dictionary with the urls of each metadata file. required Returns: Type Description tuple A tuple containing the DataFrames tissues, genes, cells_organs_germlayers and cells_w_descriptions. Source code in wikidata_panglaodb/pre.py def downloads_panglao ( data_urls ): \"\"\"Downloads metadata from PanglaoDB Gets the unique values of metadata entities and writes those to text files. Args: data_urls (dict(list)): A dictionary with the urls of each metadata file. Returns: tuple: A tuple containing the DataFrames tissues, genes, cells_organs_germlayers and cells_w_descriptions. \"\"\" tissues = pd . read_csv ( data_urls [ \"tissues\" ], usecols = [ 2 , 4 ], names = [ \"tissue\" , \"species\" ] ) . drop_duplicates () genes = pd . read_csv ( data_urls [ \"genes\" ], names = [ \"ensg_panglao\" , \"symbol\" ]) genes [ \"species\" ] = np . where ( genes [ \"ensg_panglao\" ] . str . startswith ( \"ENSMUS\" ), \"Mus musculus\" , \"Homo sapiens\" ) cells_organs_germlayers = pd . read_csv ( data_urls [ \"cells_organs_germlayers\" ], names = [ \"cell_type\" , \"germ_layer\" , \"organ\" ], ) cells_w_descriptions = pd . read_csv ( data_urls [ \"cells_w_descriptions\" ], names = [ \"cell_type\" , \"description\" , \"synonyms\" ], ) return tissues , genes , cells_organs_germlayers , cells_w_descriptions reconcile_more_types() Reconcile dataframe column against one type QID or more This functions loops through all qids given in the type_qids list and reconciles the pandas column to them, returning a concatenated dataframe with all the matches. Parameters: Name Type Description Default dataframe_column Series A pandas dataframe column with the values to reconcile. required type_qids list A list of the QIDs value you want to reconcile against. required Returns: DataFrame: A dataframe containing all possible matches for each item type. Source code in wikidata_panglaodb/pre.py def reconcile_more_types ( dataframe_column , type_qids ): \"\"\"Reconcile dataframe column against one type QID or more This functions loops through all qids given in the type_qids list and reconciles the pandas column to them, returning a concatenated dataframe with all the matches. Args: dataframe_column (Series): A pandas dataframe column with the values to reconcile. type_qids (list): A list of the QIDs value you want to reconcile against. Returns: DataFrame: A dataframe containing all possible matches for each item type. \"\"\" all_matches = [] for type in type_qids : try : current = reconcile ( dataframe_column , type_id = type , top_res = \"all\" ) all_matches . append ( current ) except Exception : pass try : full_df_matches = pd . concat ( all_matches ) except ValueError : pass else : return full_df_matches","title":"Preprocessing"},{"location":"reference/preprocessing/#preprocessing-module","text":"downloads_panglao()","title":"Preprocessing module"},{"location":"reference/preprocessing/#wikidata_panglaodb.pre.downloads_panglao","text":"Downloads metadata from PanglaoDB Gets the unique values of metadata entities and writes those to text files. Parameters: Name Type Description Default data_urls dict(list A dictionary with the urls of each metadata file. required Returns: Type Description tuple A tuple containing the DataFrames tissues, genes, cells_organs_germlayers and cells_w_descriptions. Source code in wikidata_panglaodb/pre.py def downloads_panglao ( data_urls ): \"\"\"Downloads metadata from PanglaoDB Gets the unique values of metadata entities and writes those to text files. Args: data_urls (dict(list)): A dictionary with the urls of each metadata file. Returns: tuple: A tuple containing the DataFrames tissues, genes, cells_organs_germlayers and cells_w_descriptions. \"\"\" tissues = pd . read_csv ( data_urls [ \"tissues\" ], usecols = [ 2 , 4 ], names = [ \"tissue\" , \"species\" ] ) . drop_duplicates () genes = pd . read_csv ( data_urls [ \"genes\" ], names = [ \"ensg_panglao\" , \"symbol\" ]) genes [ \"species\" ] = np . where ( genes [ \"ensg_panglao\" ] . str . startswith ( \"ENSMUS\" ), \"Mus musculus\" , \"Homo sapiens\" ) cells_organs_germlayers = pd . read_csv ( data_urls [ \"cells_organs_germlayers\" ], names = [ \"cell_type\" , \"germ_layer\" , \"organ\" ], ) cells_w_descriptions = pd . read_csv ( data_urls [ \"cells_w_descriptions\" ], names = [ \"cell_type\" , \"description\" , \"synonyms\" ], ) return tissues , genes , cells_organs_germlayers , cells_w_descriptions reconcile_more_types()","title":"wikidata_panglaodb.pre.downloads_panglao"},{"location":"reference/preprocessing/#wikidata_panglaodb.pre.reconcile_more_types","text":"Reconcile dataframe column against one type QID or more This functions loops through all qids given in the type_qids list and reconciles the pandas column to them, returning a concatenated dataframe with all the matches. Parameters: Name Type Description Default dataframe_column Series A pandas dataframe column with the values to reconcile. required type_qids list A list of the QIDs value you want to reconcile against. required Returns: DataFrame: A dataframe containing all possible matches for each item type. Source code in wikidata_panglaodb/pre.py def reconcile_more_types ( dataframe_column , type_qids ): \"\"\"Reconcile dataframe column against one type QID or more This functions loops through all qids given in the type_qids list and reconciles the pandas column to them, returning a concatenated dataframe with all the matches. Args: dataframe_column (Series): A pandas dataframe column with the values to reconcile. type_qids (list): A list of the QIDs value you want to reconcile against. Returns: DataFrame: A dataframe containing all possible matches for each item type. \"\"\" all_matches = [] for type in type_qids : try : current = reconcile ( dataframe_column , type_id = type , top_res = \"all\" ) all_matches . append ( current ) except Exception : pass try : full_df_matches = pd . concat ( all_matches ) except ValueError : pass else : return full_df_matches","title":"wikidata_panglaodb.pre.reconcile_more_types"},{"location":"reference/quality/","text":"Item quality module summarize_matches() Return a simple summary table for item matches regardless of category Returns a summary table in the following structure: n_unique_matches is the number of uniquely named input values that matched perc_matched is the percentage of uniquely named input values that matched n_item_matches is the number of unique items they matched against, including duplicate concepts Parameters: Name Type Description Default dfs_list list(DataFrame A dataframe list of the histology related reconciled tables (cells, tissues and organs) required total_list list(int A list of the number of original input values. required Returns: Type Description DataFrame A summary table for the matches. Source code in wikidata_panglaodb/quality.py def summarize_matches ( dfs_list , total_list ): \"\"\"Return a simple summary table for item matches regardless of category Returns a summary table in the following structure: n_unique_matches is the number of uniquely named input values that matched perc_matched is the percentage of uniquely named input values that matched n_item_matches is the number of unique items they matched against, including duplicate concepts Args: dfs_list (list(DataFrame)): A dataframe list of the histology related reconciled tables (cells, tissues and organs) total_list (list(int)): A list of the number of original input values. Returns: DataFrame: A summary table for the matches. \"\"\" summary_table = pd . DataFrame ( { \"n_unique_matches\" : [ df [ \"input_value\" ] . nunique () for df in dfs_list ], \"n_item_matches\" : [ df [ \"id\" ] . nunique () for df in dfs_list ], \"totals\" : total_list , } ) summary_table [ \"perc_matched\" ] = ( summary_table [ \"n_unique_matches\" ] / summary_table [ \"totals\" ] ) * 100 return summary_table summarize_histology() Return a summary table for item matches in the histology category Returns a summary table in the following structure: n_unique_matches is the number of uniquely named input values that matched perc_matched is the percentage of uniquely named input values that matched n_item_matches is the number of unique items they matched against, including duplicate concepts how_many_perfect_matches is the percentage of items matched that got a perfect 100.0 score in the reconciliation how_many_no_p31 is the percentage of items matched that don't have an 'instance of' property Parameters: Name Type Description Default dfs_list list(DataFrame A dataframe list of the histology related reconciled tables (cells, tissues and organs) required total_list list(int A list of the number of original input values. required Returns: Type Description DataFrame A summary table for the matches. Source code in wikidata_panglaodb/quality.py def summarize_histology ( dfs_list , total_list ): \"\"\"Return a summary table for item matches in the histology category Returns a summary table in the following structure: n_unique_matches is the number of uniquely named input values that matched perc_matched is the percentage of uniquely named input values that matched n_item_matches is the number of unique items they matched against, including duplicate concepts how_many_perfect_matches is the percentage of items matched that got a perfect 100.0 score in the reconciliation how_many_no_p31 is the percentage of items matched that don't have an 'instance of' property Args: dfs_list (list(DataFrame)): A dataframe list of the histology related reconciled tables (cells, tissues and organs) total_list (list(int)): A list of the number of original input values. Returns: DataFrame: A summary table for the matches. \"\"\" summary_table = summarize_matches ( dfs_list , total_list ) summary_table [ \"n_perfect_matches\" ] = [ len ( df [ df [ \"score\" ] == 100.0 ]) for df in dfs_list ] summary_table [ \"n_no_p31\" ] = [ len ( df [ df [ \"type\" ] == \"[]\" ]) for df in dfs_list ] summary_table [ \"how_many_perfect_matches\" ] = ( summary_table [ \"n_perfect_matches\" ] / summary_table [ \"n_item_matches\" ] ) * 100 summary_table [ \"how_many_no_p31\" ] = ( summary_table [ \"n_no_p31\" ] / summary_table [ \"n_item_matches\" ] ) * 100 summary_table . drop ( [ \"n_no_p31\" , \"n_perfect_matches\" , \"totals\" ], axis = 1 , inplace = True ) return summary_table get_number_of_statements_for_items() Return a pandas dataframe of items and their number of statements This function takes in a list of QIDs and uses the Wikibase API to return a table with the number of statements each item has. Parameters: Name Type Description Default qid_list list A list containing the QIDs you want to analyse. required Returns: Type Description DataFrame A dataframe of two columns, one for the input QIDs, another with the number of statements for each QID. Source code in wikidata_panglaodb/quality.py def get_number_of_statements_for_items ( qid_list , has_property ): \"\"\"Return a pandas dataframe of items and their number of statements This function takes in a list of QIDs and uses the Wikibase API to return a table with the number of statements each item has. Args: qid_list (list): A list containing the QIDs you want to analyse. Returns: DataFrame: A dataframe of two columns, one for the input QIDs, another with the number of statements for each QID. \"\"\" # API limits to 50 items at once item_quality_dict = defaultdict ( list ) for i in range ( 0 , len ( qid_list ), 50 ): curr_ids = qid_list [ i : ( i + 50 )] params = { \"action\" : \"wbgetentities\" , \"ids\" : \"|\" . join ( curr_ids ), \"format\" : \"json\" , } resp = requests . post ( \"https://www.wikidata.org/w/api.php\" , data = params ) query_result = resp . json ()[ \"entities\" ] for item in query_result : properties = query_result [ item ][ \"claims\" ] if has_property in properties : item_quality_dict [ item ] = [ len ( properties . keys ()), True ] else : item_quality_dict [ item ] = [ len ( properties . keys ()), False ] item_quality_table = ( pd . DataFrame . from_dict ( item_quality_dict , columns = [ \"n_statements\" , \"has_property\" ], orient = \"index\" ) . rename_axis ( \"id\" ) . reset_index () ) return item_quality_table get_genes_item_quality() Changes ID columns to binary values Changes the alternative id columns in the reconciled gene data to binary values, also drops unecessary columns if drop == True. Parameters: Name Type Description Default df DataFrame Reconciled gene data. required drop bool Wether or not to drop the other columns. True Returns: Type Description DataFrame Simplified dataframe for plotting. Source code in wikidata_panglaodb/quality.py def get_genes_item_quality ( df , drop = True ): \"\"\"Changes ID columns to binary values Changes the alternative id columns in the reconciled gene data to binary values, also drops unecessary columns if drop == True. Args: df (DataFrame): Reconciled gene data. drop (bool): Wether or not to drop the other columns. Returns: DataFrame: Simplified dataframe for plotting. \"\"\" result_df = df . copy () . rename ( columns = { \"item\" : \"id\" }) result_df [ \"has_ensg\" ] = np . where ( result_df [ \"ensg_wdt\" ] . isna (), False , True ) result_df [ \"has_entrez\" ] = np . where ( result_df [ \"entrez\" ] . isna (), False , True ) if drop == True : result_df . drop ( [ \"itemLabel\" , \"entrez\" , \"ensg_wdt\" , \"ensg_panglao\" ], axis = 1 , inplace = True ) return result_df aggregate_altID_data() Summarize alternative IDs for final bar plot Parameters: Name Type Description Default dataframe DataFrame With either the histological or gene data. required group list Columns to use for the groupby. required Returns: Type Description DataFrame Summarized counts and percentages. Source code in wikidata_panglaodb/quality.py def aggregate_altID_data ( dataframe , group ): \"\"\"Summarize alternative IDs for final bar plot Args: dataframe (DataFrame): With either the histological or gene data. group (list): Columns to use for the groupby. Returns: DataFrame: Summarized counts and percentages. \"\"\" aggregated = ( dataframe . groupby ( group ) . agg ( has_property = pd . NamedAgg ( \"has_property\" , \"sum\" ), total = pd . NamedAgg ( group [ 0 ], \"count\" ), ) . reset_index () ) aggregated [ \"percentage_has_id\" ] = ( aggregated [ \"has_property\" ] / aggregated [ \"total\" ] ) * 100 return aggregated","title":"Item quality"},{"location":"reference/quality/#item-quality-module","text":"summarize_matches()","title":"Item quality module"},{"location":"reference/quality/#wikidata_panglaodb.quality.summarize_matches","text":"Return a simple summary table for item matches regardless of category Returns a summary table in the following structure: n_unique_matches is the number of uniquely named input values that matched perc_matched is the percentage of uniquely named input values that matched n_item_matches is the number of unique items they matched against, including duplicate concepts Parameters: Name Type Description Default dfs_list list(DataFrame A dataframe list of the histology related reconciled tables (cells, tissues and organs) required total_list list(int A list of the number of original input values. required Returns: Type Description DataFrame A summary table for the matches. Source code in wikidata_panglaodb/quality.py def summarize_matches ( dfs_list , total_list ): \"\"\"Return a simple summary table for item matches regardless of category Returns a summary table in the following structure: n_unique_matches is the number of uniquely named input values that matched perc_matched is the percentage of uniquely named input values that matched n_item_matches is the number of unique items they matched against, including duplicate concepts Args: dfs_list (list(DataFrame)): A dataframe list of the histology related reconciled tables (cells, tissues and organs) total_list (list(int)): A list of the number of original input values. Returns: DataFrame: A summary table for the matches. \"\"\" summary_table = pd . DataFrame ( { \"n_unique_matches\" : [ df [ \"input_value\" ] . nunique () for df in dfs_list ], \"n_item_matches\" : [ df [ \"id\" ] . nunique () for df in dfs_list ], \"totals\" : total_list , } ) summary_table [ \"perc_matched\" ] = ( summary_table [ \"n_unique_matches\" ] / summary_table [ \"totals\" ] ) * 100 return summary_table summarize_histology()","title":"wikidata_panglaodb.quality.summarize_matches"},{"location":"reference/quality/#wikidata_panglaodb.quality.summarize_histology","text":"Return a summary table for item matches in the histology category Returns a summary table in the following structure: n_unique_matches is the number of uniquely named input values that matched perc_matched is the percentage of uniquely named input values that matched n_item_matches is the number of unique items they matched against, including duplicate concepts how_many_perfect_matches is the percentage of items matched that got a perfect 100.0 score in the reconciliation how_many_no_p31 is the percentage of items matched that don't have an 'instance of' property Parameters: Name Type Description Default dfs_list list(DataFrame A dataframe list of the histology related reconciled tables (cells, tissues and organs) required total_list list(int A list of the number of original input values. required Returns: Type Description DataFrame A summary table for the matches. Source code in wikidata_panglaodb/quality.py def summarize_histology ( dfs_list , total_list ): \"\"\"Return a summary table for item matches in the histology category Returns a summary table in the following structure: n_unique_matches is the number of uniquely named input values that matched perc_matched is the percentage of uniquely named input values that matched n_item_matches is the number of unique items they matched against, including duplicate concepts how_many_perfect_matches is the percentage of items matched that got a perfect 100.0 score in the reconciliation how_many_no_p31 is the percentage of items matched that don't have an 'instance of' property Args: dfs_list (list(DataFrame)): A dataframe list of the histology related reconciled tables (cells, tissues and organs) total_list (list(int)): A list of the number of original input values. Returns: DataFrame: A summary table for the matches. \"\"\" summary_table = summarize_matches ( dfs_list , total_list ) summary_table [ \"n_perfect_matches\" ] = [ len ( df [ df [ \"score\" ] == 100.0 ]) for df in dfs_list ] summary_table [ \"n_no_p31\" ] = [ len ( df [ df [ \"type\" ] == \"[]\" ]) for df in dfs_list ] summary_table [ \"how_many_perfect_matches\" ] = ( summary_table [ \"n_perfect_matches\" ] / summary_table [ \"n_item_matches\" ] ) * 100 summary_table [ \"how_many_no_p31\" ] = ( summary_table [ \"n_no_p31\" ] / summary_table [ \"n_item_matches\" ] ) * 100 summary_table . drop ( [ \"n_no_p31\" , \"n_perfect_matches\" , \"totals\" ], axis = 1 , inplace = True ) return summary_table get_number_of_statements_for_items()","title":"wikidata_panglaodb.quality.summarize_histology"},{"location":"reference/quality/#wikidata_panglaodb.quality.get_number_of_statements_for_items","text":"Return a pandas dataframe of items and their number of statements This function takes in a list of QIDs and uses the Wikibase API to return a table with the number of statements each item has. Parameters: Name Type Description Default qid_list list A list containing the QIDs you want to analyse. required Returns: Type Description DataFrame A dataframe of two columns, one for the input QIDs, another with the number of statements for each QID. Source code in wikidata_panglaodb/quality.py def get_number_of_statements_for_items ( qid_list , has_property ): \"\"\"Return a pandas dataframe of items and their number of statements This function takes in a list of QIDs and uses the Wikibase API to return a table with the number of statements each item has. Args: qid_list (list): A list containing the QIDs you want to analyse. Returns: DataFrame: A dataframe of two columns, one for the input QIDs, another with the number of statements for each QID. \"\"\" # API limits to 50 items at once item_quality_dict = defaultdict ( list ) for i in range ( 0 , len ( qid_list ), 50 ): curr_ids = qid_list [ i : ( i + 50 )] params = { \"action\" : \"wbgetentities\" , \"ids\" : \"|\" . join ( curr_ids ), \"format\" : \"json\" , } resp = requests . post ( \"https://www.wikidata.org/w/api.php\" , data = params ) query_result = resp . json ()[ \"entities\" ] for item in query_result : properties = query_result [ item ][ \"claims\" ] if has_property in properties : item_quality_dict [ item ] = [ len ( properties . keys ()), True ] else : item_quality_dict [ item ] = [ len ( properties . keys ()), False ] item_quality_table = ( pd . DataFrame . from_dict ( item_quality_dict , columns = [ \"n_statements\" , \"has_property\" ], orient = \"index\" ) . rename_axis ( \"id\" ) . reset_index () ) return item_quality_table get_genes_item_quality()","title":"wikidata_panglaodb.quality.get_number_of_statements_for_items"},{"location":"reference/quality/#wikidata_panglaodb.quality.get_genes_item_quality","text":"Changes ID columns to binary values Changes the alternative id columns in the reconciled gene data to binary values, also drops unecessary columns if drop == True. Parameters: Name Type Description Default df DataFrame Reconciled gene data. required drop bool Wether or not to drop the other columns. True Returns: Type Description DataFrame Simplified dataframe for plotting. Source code in wikidata_panglaodb/quality.py def get_genes_item_quality ( df , drop = True ): \"\"\"Changes ID columns to binary values Changes the alternative id columns in the reconciled gene data to binary values, also drops unecessary columns if drop == True. Args: df (DataFrame): Reconciled gene data. drop (bool): Wether or not to drop the other columns. Returns: DataFrame: Simplified dataframe for plotting. \"\"\" result_df = df . copy () . rename ( columns = { \"item\" : \"id\" }) result_df [ \"has_ensg\" ] = np . where ( result_df [ \"ensg_wdt\" ] . isna (), False , True ) result_df [ \"has_entrez\" ] = np . where ( result_df [ \"entrez\" ] . isna (), False , True ) if drop == True : result_df . drop ( [ \"itemLabel\" , \"entrez\" , \"ensg_wdt\" , \"ensg_panglao\" ], axis = 1 , inplace = True ) return result_df aggregate_altID_data()","title":"wikidata_panglaodb.quality.get_genes_item_quality"},{"location":"reference/quality/#wikidata_panglaodb.quality.aggregate_altID_data","text":"Summarize alternative IDs for final bar plot Parameters: Name Type Description Default dataframe DataFrame With either the histological or gene data. required group list Columns to use for the groupby. required Returns: Type Description DataFrame Summarized counts and percentages. Source code in wikidata_panglaodb/quality.py def aggregate_altID_data ( dataframe , group ): \"\"\"Summarize alternative IDs for final bar plot Args: dataframe (DataFrame): With either the histological or gene data. group (list): Columns to use for the groupby. Returns: DataFrame: Summarized counts and percentages. \"\"\" aggregated = ( dataframe . groupby ( group ) . agg ( has_property = pd . NamedAgg ( \"has_property\" , \"sum\" ), total = pd . NamedAgg ( group [ 0 ], \"count\" ), ) . reset_index () ) aggregated [ \"percentage_has_id\" ] = ( aggregated [ \"has_property\" ] / aggregated [ \"total\" ] ) * 100 return aggregated","title":"wikidata_panglaodb.quality.aggregate_altID_data"},{"location":"reference/similarity/","text":"Similarity module get_string_match() Checks if the stemmed version of two strings is the same Sometimes matches from the reconciliation service return as false since the item has few statements or no statements at all. To take care of those cases we'll perform a simple string similarity check, using the stemmed version of both strings. Parameters: Name Type Description Default string1 str A string to compare. required string2 str A string to compare. required Returns: Type Description bool If they match, return True, else return False. Source code in wikidata_panglaodb/similarity.py def get_string_match ( string1 , string2 ): \"\"\"Checks if the stemmed version of two strings is the same Sometimes matches from the reconciliation service return as false since the item has few statements or no statements at all. To take care of those cases we'll perform a simple string similarity check, using the stemmed version of both strings. Args: string1 (str): A string to compare. string2 (str): A string to compare. Returns: bool: If they match, return True, else return False. \"\"\" tokenized = [[ tokenized ] for tokenized in [ string1 , string2 ]] ps = PorterStemmer () stemmed = [[ ps . stem ( w )] for tokens in tokenized for w in tokens ] return stemmed [ 0 ] == stemmed [ 1 ]","title":"Similarity"},{"location":"reference/similarity/#similarity-module","text":"get_string_match()","title":"Similarity module"},{"location":"reference/similarity/#wikidata_panglaodb.similarity.get_string_match","text":"Checks if the stemmed version of two strings is the same Sometimes matches from the reconciliation service return as false since the item has few statements or no statements at all. To take care of those cases we'll perform a simple string similarity check, using the stemmed version of both strings. Parameters: Name Type Description Default string1 str A string to compare. required string2 str A string to compare. required Returns: Type Description bool If they match, return True, else return False. Source code in wikidata_panglaodb/similarity.py def get_string_match ( string1 , string2 ): \"\"\"Checks if the stemmed version of two strings is the same Sometimes matches from the reconciliation service return as false since the item has few statements or no statements at all. To take care of those cases we'll perform a simple string similarity check, using the stemmed version of both strings. Args: string1 (str): A string to compare. string2 (str): A string to compare. Returns: bool: If they match, return True, else return False. \"\"\" tokenized = [[ tokenized ] for tokenized in [ string1 , string2 ]] ps = PorterStemmer () stemmed = [[ ps . stem ( w )] for tokens in tokenized for w in tokens ] return stemmed [ 0 ] == stemmed [ 1 ]","title":"wikidata_panglaodb.similarity.get_string_match"}]}