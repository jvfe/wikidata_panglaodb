{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Analysing the extent of cell type information present in Wikidata: A case study on PanglaoDB Research compendium for the project \"Analysing the extent of cell type information present in Wikidata: A case study on PanglaoDB\". Repository brief descrition Research-related directories: analysis : Scripts and notebooks used for the main analysis. It also includes the subdirectories: data : Raw data from PanglaoDB and Wikidata is stored here. results : Processed data is stored here. manuscripts : Manuscripts for this research project, each manuscript is a submodule of a GitHub repository that uses Manubot . Software-related directories, they are structured similarly to a Python package: wikidata_panglaodb : This is the source code for all author-defined functions used in the analysis. tests : These are the unit tests for the wikidata_panglaodb \"package\" functions. docs : This is a directory containing documentation for the wikidata_panglaodb functions, it is served as a live website in our github pages branch. Reproducing and developing Reproducing the analyses Pre-requisites: Python>=3.7 A unix based terminal interface. Download the repository's zip file or clone it using: git clone --recurse-submodules https://github.com/jvfe/wikidata_panglaodb Then, at the project's root directory (wikidata_panglaodb/): pip install . And then run the scripts in the analysis/ subdirectory. Collaborating Pre-requisites: Git A unix based terminal interface Conda Initiate the environment: conda env create -f environment.yaml conda activate wdt_panglaodb Download the base package in editable mode: pip install -e . If you've already collaborated before but changes have been made to the conda enviroment/repository, run: git pull origin master conda activate wdt_panglaodb conda env update --file environment.yaml","title":"Home"},{"location":"#analysing-the-extent-of-cell-type-information-present-in-wikidata-a-case-study-on-panglaodb","text":"Research compendium for the project \"Analysing the extent of cell type information present in Wikidata: A case study on PanglaoDB\".","title":"Analysing the extent of cell type information present in Wikidata: A case study on PanglaoDB"},{"location":"#repository-brief-descrition","text":"Research-related directories: analysis : Scripts and notebooks used for the main analysis. It also includes the subdirectories: data : Raw data from PanglaoDB and Wikidata is stored here. results : Processed data is stored here. manuscripts : Manuscripts for this research project, each manuscript is a submodule of a GitHub repository that uses Manubot . Software-related directories, they are structured similarly to a Python package: wikidata_panglaodb : This is the source code for all author-defined functions used in the analysis. tests : These are the unit tests for the wikidata_panglaodb \"package\" functions. docs : This is a directory containing documentation for the wikidata_panglaodb functions, it is served as a live website in our github pages branch.","title":"Repository brief descrition"},{"location":"#reproducing-and-developing","text":"","title":"Reproducing and developing"},{"location":"#reproducing-the-analyses","text":"Pre-requisites: Python>=3.7 A unix based terminal interface. Download the repository's zip file or clone it using: git clone --recurse-submodules https://github.com/jvfe/wikidata_panglaodb Then, at the project's root directory (wikidata_panglaodb/): pip install . And then run the scripts in the analysis/ subdirectory.","title":"Reproducing the analyses"},{"location":"#collaborating","text":"Pre-requisites: Git A unix based terminal interface Conda Initiate the environment: conda env create -f environment.yaml conda activate wdt_panglaodb Download the base package in editable mode: pip install -e . If you've already collaborated before but changes have been made to the conda enviroment/repository, run: git pull origin master conda activate wdt_panglaodb conda env update --file environment.yaml","title":"Collaborating"},{"location":"reference/","text":"Reference downloads_panglao() Downloads metadata from PanglaoDB Gets the unique values of metadata entities and writes those to text files. Parameters: Name Type Description Default data_urls dict(list A dictionary with the urls of each metadata file. required Returns: Type Description tuple A tuple containing the DataFrames tissues, genes, cells_organs_germlayers and cells_w_descriptions. Source code in wikidata_panglaodb/pre.py def downloads_panglao ( data_urls ): \"\"\"Downloads metadata from PanglaoDB Gets the unique values of metadata entities and writes those to text files. Args: data_urls (dict(list)): A dictionary with the urls of each metadata file. Returns: tuple: A tuple containing the DataFrames tissues, genes, cells_organs_germlayers and cells_w_descriptions. \"\"\" tissues = pd . read_csv ( data_urls [ \"tissues\" ], usecols = [ 2 , 4 ], names = [ \"tissue\" , \"species\" ] ) . drop_duplicates () genes = pd . read_csv ( data_urls [ \"genes\" ], names = [ \"ensg\" , \"symbol\" ]) genes [ \"species\" ] = np . where ( genes [ \"ensg\" ] . str . startswith ( \"ENSMUS\" ), \"Mus musculus\" , \"Homo sapiens\" ) cells_organs_germlayers = pd . read_csv ( data_urls [ \"cells_organs_germlayers\" ], names = [ \"cell_type\" , \"germ_layer\" , \"organ\" ], ) cells_w_descriptions = pd . read_csv ( data_urls [ \"cells_w_descriptions\" ], names = [ \"cell_type\" , \"description\" , \"synonyms\" ], ) return tissues , genes , cells_organs_germlayers , cells_w_descriptions reconcile_and_filter() Reconcile dataframe column against one type QID or more This functions loops through all qids given in the type_qids list and reconciles the pandas column to them, returning a concatenated dataframe with all the matches. Parameters: Name Type Description Default dataframe_column Series A pandas dataframe column with the values to reconcile. required type_qids list A list of the QIDs value you want to reconcile against. required Returns: DataFrame: A dataframe containing all possible matches for each item type. Source code in wikidata_panglaodb/pre.py def reconcile_and_filter ( dataframe_column , type_qids ): \"\"\"Reconcile dataframe column against one type QID or more This functions loops through all qids given in the type_qids list and reconciles the pandas column to them, returning a concatenated dataframe with all the matches. Args: dataframe_column (Series): A pandas dataframe column with the values to reconcile. type_qids (list): A list of the QIDs value you want to reconcile against. Returns: DataFrame: A dataframe containing all possible matches for each item type. \"\"\" all_matches = [] for type in type_qids : try : current = reconcile ( dataframe_column , type_id = type , top_res = \"all\" ) all_matches . append ( current ) except Exception : pass try : full_df_matches = pd . concat ( all_matches ) except ValueError : pass else : return full_df_matches","title":"Reference"},{"location":"reference/#reference","text":"downloads_panglao()","title":"Reference"},{"location":"reference/#wikidata_panglaodb.pre.downloads_panglao","text":"Downloads metadata from PanglaoDB Gets the unique values of metadata entities and writes those to text files. Parameters: Name Type Description Default data_urls dict(list A dictionary with the urls of each metadata file. required Returns: Type Description tuple A tuple containing the DataFrames tissues, genes, cells_organs_germlayers and cells_w_descriptions. Source code in wikidata_panglaodb/pre.py def downloads_panglao ( data_urls ): \"\"\"Downloads metadata from PanglaoDB Gets the unique values of metadata entities and writes those to text files. Args: data_urls (dict(list)): A dictionary with the urls of each metadata file. Returns: tuple: A tuple containing the DataFrames tissues, genes, cells_organs_germlayers and cells_w_descriptions. \"\"\" tissues = pd . read_csv ( data_urls [ \"tissues\" ], usecols = [ 2 , 4 ], names = [ \"tissue\" , \"species\" ] ) . drop_duplicates () genes = pd . read_csv ( data_urls [ \"genes\" ], names = [ \"ensg\" , \"symbol\" ]) genes [ \"species\" ] = np . where ( genes [ \"ensg\" ] . str . startswith ( \"ENSMUS\" ), \"Mus musculus\" , \"Homo sapiens\" ) cells_organs_germlayers = pd . read_csv ( data_urls [ \"cells_organs_germlayers\" ], names = [ \"cell_type\" , \"germ_layer\" , \"organ\" ], ) cells_w_descriptions = pd . read_csv ( data_urls [ \"cells_w_descriptions\" ], names = [ \"cell_type\" , \"description\" , \"synonyms\" ], ) return tissues , genes , cells_organs_germlayers , cells_w_descriptions reconcile_and_filter()","title":"wikidata_panglaodb.pre.downloads_panglao"},{"location":"reference/#wikidata_panglaodb.pre.reconcile_and_filter","text":"Reconcile dataframe column against one type QID or more This functions loops through all qids given in the type_qids list and reconciles the pandas column to them, returning a concatenated dataframe with all the matches. Parameters: Name Type Description Default dataframe_column Series A pandas dataframe column with the values to reconcile. required type_qids list A list of the QIDs value you want to reconcile against. required Returns: DataFrame: A dataframe containing all possible matches for each item type. Source code in wikidata_panglaodb/pre.py def reconcile_and_filter ( dataframe_column , type_qids ): \"\"\"Reconcile dataframe column against one type QID or more This functions loops through all qids given in the type_qids list and reconciles the pandas column to them, returning a concatenated dataframe with all the matches. Args: dataframe_column (Series): A pandas dataframe column with the values to reconcile. type_qids (list): A list of the QIDs value you want to reconcile against. Returns: DataFrame: A dataframe containing all possible matches for each item type. \"\"\" all_matches = [] for type in type_qids : try : current = reconcile ( dataframe_column , type_id = type , top_res = \"all\" ) all_matches . append ( current ) except Exception : pass try : full_df_matches = pd . concat ( all_matches ) except ValueError : pass else : return full_df_matches","title":"wikidata_panglaodb.pre.reconcile_and_filter"}]}